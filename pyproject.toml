[project]
name = "tasker-bot"
version = "0.1.0"
description = "Telegram bot for my projects"
authors = [
    {name = "mks_min",email = "mininname@vk.com"}
]
readme = "README.md"
requires-python = ">=3.10,<4.0"

[tool.poetry]
package-mode = false

[tool.poetry.dependencies]
aiogram = "^3.20.0.post0"
aiohttp = "^3.11.18"
alembic = "^1.15.2"
asyncpg = "^0.30.0"
pydantic = "^2.11.4"
pydantic-settings = "^2.9.1"
sqlalchemy = "^2.0.40"
apscheduler = "^3.11.0"
faststream = {extras = ["rabbit"], version = "^0.5.47"}
typer = "^0.20.0"

[tool.poetry.group.dev.dependencies]
black = "^25.1.0"
mypy = "^1.15.0"
ruff = "^0.12.12"
pre-commit = "^4.3.0"

[tool.poetry.group.tests.dependencies]
pytest = "^8.4.1"
pytest-asyncio = "^1.0.0"
coverage = "^7.9.2"
aiosqlite = "^0.21.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"


# pytest settings
[tool.pytest.ini_options]
minversion = "8.3"
addopts = "-ra --strict-markers"
log_cli = false
log_cli_level = "INFO"
console_output_style = "progress"
xfail_strict = true
pythonpath = "bot-app"
testpaths = "bot-app/testing"
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

markers = []


# mypy settings
[tool.mypy]
strict = true
plugins = [
    "pydantic.mypy",
]


# ruff settings
[tool.ruff]
required-version = ">=0.12.8"
src = [
    "bot-app",
]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".idea",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.10
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.

select = [
    "YTT", # flake8-2020 (YTT)
    "ANN", # flake8-annotations (ANN)
    "ASYNC", # flake8-async (ASYNC)
    "S", # flake8-bandit (S)
#    "BLE", # flake8-blind-except (BLE)
    "FBT", # flake8-boolean-trap (FBT)
    "B", # flake8-bugbear (B)
    "COM", # flake8-commas (COM)
    "C4", # flake8-comprehensions (C4)
    "DTZ", # flake8-datetimez (DTZ)
    "T10", # flake8-debugger (T10)
    "EM", # flake8-errmsg (EM)
    "ISC", # flake8-implicit-str-concat (ISC)
    "ICN", # flake8-import-conventions (ICN)
    "LOG", # flake8-logging (LOG)
    "G", # flake8-logging-format (G)
    "INP", # flake8-no-pep420 (INP)
    "PIE", # flake8-pie (PIE)
    "T20", # flake8-print (T20)
    "PYI", # flake8-pyi (PYI)
    "Q", # flake8-quotes (Q)
    "RSE", # flake8-raise (RSE)
    "RET", # flake8-return (RET)
#    "SLF", # flake8-self (SLF)
    "SIM", # flake8-simplify (SIM)
    "SLOT", # flake8-slots (SLOT)
    "TC", # flake8-type-checking (TC)
    "ARG", # flake8-unused-arguments (ARG)
    "PTH", # flake8-use-pathlib (PTH)
    "FLY", # flynt (FLY)
    "I", # isort (I)
    "C90", # mccabe (C90)
    "N", # pep8-naming (N)
    "PERF", # Perflint (PERF)
    "E", # pycodestyle Error (E)
    "W", # pycodestyle Warning (W)
    "F", # Pyflakes (F)
    "PGH", # pygrep-hooks (PGH)
    "PLC", # Pylint Convention (PLC)
    "PLE", # Pylint Error (PLE)
    "PLR", # Pylint Refactor (PLR)
    "PLW", # Pylint Warning (PLW)
    "UP", # pyupgrade (UP)
    "FURB", # refurb (FURB)
    "RUF", # Ruff-specific rules (RUF)
    "TRY", # tryceratops (TRY)
]

ignore = [
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed in {name} TEMPORARY
    "S101", # S101	assert	Use of assert detected
    "RUF001", # ambiguous-unicode-character-string (RUF001)
    "RUF002", # ambiguous-unicode-character-docstring (RUF002)
    "RUF003", # ambiguous-unicode-character-comment (RUF003)
    "TC006", # runtime-cast-value (TC006)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.extend-per-file-ignores]
"bot-app/alembic/**" = [
    "INP", # flake8-no-pep420 (INP)
]
"**/test_*.py" = [
    "PIE", # flake8-pie (PIE)
    "PLR2004",  # Magic value used in comparison, consider replacing `5` with a constant variable
]
"**/conftest.py" = [
]
